# YAML

# Requires that a function expression be named.  Named functions provide more information in the error stack trace than
# anonymous functions.
#
# @type {boolean}
# disallowAnonymousFunctions: false

# Requires object destructuring for multiple return values, not array destructuring.
#
# @type {boolean}
# disallowArrayDestructuringReturn: false

# Disallows arrow functions.
#
# @type {boolean}
# disallowArrowFunctions: false

# Requires the first alphabetical character of a comment to be lowercase.
#
# @type {boolean}
# disallowCapitalizedComments: false

# Disallows commas as last token on a line in lists.
#
# @type {boolean|Object}
# disallowCommaBeforeLineBreak: false

# Disallows curly braces after statements.
#
# @type {Array|boolean}
# disallowCurlyBraces: false

# Disallows identifiers that start or end in _.
#
# @type {boolean|Object}
# disallowDanglingUnderscores: false

# Disallows empty blocks (except for catch blocks).
#
# @type {boolean|Object}
disallowEmptyBlocks: true

# Disallows function declarations.
#
# @type {boolean}
# disallowFunctionDeclarations: false

# Disallows identical destructuring names for the key and value in favor of using shorthand destructuring.
#
# @type {boolean}
# disallowIdenticalDestructuringNames: false

# Disallows a specified set of identifier names.
#
# @type {Array}
disallowIdentifierNames: ['default']

# Disallows implicit type conversion.
#
# @type {Array}
disallowImplicitTypeConversion: []

# Disallows usage of specified keywords.
#
# @type {Array}
disallowKeywords: ['with']

# Disallows keywords in your comments, such as TODO or FIXME
#
# @type {Array|boolean|string}
# disallowKeywordsInComments: false

# Disallows placing keywords on a new line.
#
# @type {Array}
disallowKeywordsOnNewLine: []

# Requires lines to not contain both spaces and tabs consecutively, or spaces after tabs only for alignment if "smart".
#
# @type {boolean|string}
disallowMixedSpacesAndTabs: true

# Disallows the test, consequent, and alternate to be on separate lines when using the ternary operator.
#
# @type {boolean}
disallowMultiLineTernary: true

# Disallows multiple blank lines in a row.
#
# @type {boolean}
# disallowMultipleLineBreaks: false

# Disallows strings that span multiple lines without using concatenation.
#
# @type {boolean}
disallowMultipleLineStrings: true

# Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token
#
# @type {boolean|Object}
# disallowMultipleSpaces: { allowEOLComments: true }

# Disallows multiple var declaration (except for-loop).
#
# @type {boolean|Object}
# disallowMultipleVarDecl: false

# Disallows unassigned functions to be named inline
#
# @type {boolean}
# disallowNamedUnassignedFunctions: false

# Disallows nested ternaries.
#
# @type {boolean|Object}
disallowNestedTernaries: true

# Disallows newline before opening curly brace of all block statements.
#
# @type {boolean|Object|string[]}
disallowNewlineBeforeBlockStatements: true

# Disallow use of certain node types (from Esprima/ESTree).
#
# @type {string[]}
disallowNodeTypes: ['LabeledStatement']

# Disallows the not, not equals, and strict not equals operators in conditionals.
#
# @type {boolean}
# disallowNotOperatorsInConditionals: false

# Disallows placing object keys on new line
#
# @type {boolean}
# disallowObjectKeysOnNewLine: false

# Requires putting certain operators on the next line rather than on the current line before a line break.
#
# @type {boolean|string[]}
disallowOperatorBeforeLineBreak: ['.']

# Disallow a newline after blocks
#
# @type {boolean}
# disallowPaddingNewLinesAfterBlocks: false

# Disallow a blank line after 'use strict'; statements
#
# @type {boolean}
# disallowPaddingNewLinesAfterUseStrict: false

# Disallows newline before module.exports
#
# @type {boolean}
# disallowPaddingNewLinesBeforeExport: false

# Disallow an empty line above the specified keywords.
#
# @type {boolean|string[]}
# disallowPaddingNewlinesBeforeKeywords: false

# Disallows newline before line comments
#
# @type {boolean}
# disallowPaddingNewLinesBeforeLineComments: false

# Disallows blocks from beginning or ending with 2 newlines.
#
# @type {boolean|Object}
disallowPaddingNewlinesInBlocks: true

# Disallows newlines adjacent to curly braces in all object literals.
#
# @type {boolean}
# disallowPaddingNewLinesInObjects: false

# Disallows parentheses around arrow function expressions with a single parameter.
#
# @type {boolean}
# disallowParenthesesAroundArrowParam: false

# Disallows quoted keys in object if possible.
#
# @type {boolean|Object}
disallowQuotedKeysInObjects: { allExcept: 'reserved' }

# Disallows lines from ending in a semicolon.
#
# @type {boolean}
# disallowSemicolons: false

# Require arrow functions to use a block statement (explicit return).
#
# @type {boolean}
# disallowShorthandArrowFunctions: false

# Requires sticking binary operators to the right.
#
# @type {boolean|string[]}
# disallowSpaceAfterBinaryOperators: false

# Disallows spaces after commas
#
# @type {boolean|Object}
# disallowSpaceAfterComma: false

# Disallows space after keyword.
#
# @type {boolean|string[]}
# disallowSpaceAfterKeywords: false

# Requires that a line comment (//) not be followed by a space.
#
# @type {boolean}
# disallowSpaceAfterLineComment: false

# Disallows space after object keys.
#
# @type {boolean|Object}
disallowSpaceAfterObjectKeys: true

# Requires sticking unary operators to the right.
#
# @type {boolean|string[]}
disallowSpaceAfterPrefixUnaryOperators: true

# Requires sticking binary operators to the left.
#
# @type {boolean|string[]}
# disallowSpaceBeforeBinaryOperators: false

# Disallows space before block statements (for loops, control structures).
#
# @type {boolean}
# disallowSpaceBeforeBlockStatements: false

# Disallows spaces before commas
#
# @type {boolean|Object}
disallowSpaceBeforeComma: true

# Disallows space before keyword.
#
# @type {boolean|string[]}
# disallowSpaceBeforeKeywords: false

# Disallows space before object values.
#
# @type {boolean}
# disallowSpaceBeforeObjectValues: false

# Requires sticking unary operators to the left.
#
# @type {boolean|string[]}
disallowSpaceBeforePostfixUnaryOperators: true

# Disallows spaces before semicolons.
#
# @type {boolean|Object}
disallowSpaceBeforeSemicolon: true

# Ensure there are no spaces after argument separators in call expressions.
#
# @type {boolean}
# disallowSpaceBetweenArguments: false

# Disallows space before () or {} in anonymous function expressions.
#
# @type {Object}
# disallowSpacesInAnonymousFunctionExpression:
  # beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Disallows space before () in call expressions.
#
# @type {boolean}
disallowSpacesInCallExpression: true

# Disallows space before and/or after ? or : in conditional expressions.
#
# @type {boolean|Object}
# disallowSpacesInConditionalExpression: false

# Disallow spaces in between for statement.
#
# @type {boolean}
# disallowSpacesInForStatement: false

# Disallows space before () or {} in function expressions (both named and anonymous) and function declarations.
#
# @type {Object}
# disallowSpacesInFunction:
  # beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Disallows space before () or {} in function declarations.
#
# @type {Object}
disallowSpacesInFunctionDeclaration:
  # beforeOpeningCurlyBrace: true
  beforeOpeningRoundBrace: true

# Disallows space before () or {} in function expressions (both named and anonymous).
#
# @type {Object}
# disallowSpacesInFunctionExpression:
  # beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Disallow space before or after * in generator functions
#
# @type {Object}
disallowSpacesInGenerator:
  beforeStar: true

# Disallows space before () or {} in named function expressions.
#
# @type {Object}
disallowSpacesInNamedFunctionExpression:
  # beforeOpeningCurlyBrace: true
  beforeOpeningRoundBrace: true

# Disallows space after opening array square bracket and before closing.  Reports only on arrays, not on property
# accessors.  Use disallowSpacesInsideBrackets to report on all brackets.
#
# @type {boolean|Object|string}
disallowSpacesInsideArrayBrackets:
  allExcept: [ '[', ']' ]

# Disallows space after opening square bracket and before closing.  Reports on all on brackets, even on property accessors. Use disallowSpacesInsideArrayBrackets to exclude property accessors.
#
# @type {boolean|Object}
disallowSpacesInsideBrackets: true

# Disallows space after opening object curly brace and before closing.
#
# @type {boolean|Object|string}
# disallowSpacesInsideObjectBrackets: false

# Disallows space after opening round bracket and before closing.
#
# @type {boolean|Object}
# disallowSpacesInsideParentheses: false

# Disallows space after opening and before closing grouping parentheses.
#
# @type {boolean|Object}
disallowSpacesInsideParenthesizedExpression: true

# Disallows spaces before and after curly brace inside template string placeholders.
#
# @type {boolean}
disallowSpacesInsideTemplateStringPlaceholders: true

# Disallows tabs everywhere.
#
# @type {boolean}
disallowTabs: true

# Disallows an extra comma following the final element of an array or object literal.
#
# @type {boolean}
disallowTrailingComma: false

# Requires all lines to end on a non-whitespace character
#
# @type {boolean|string}
disallowTrailingWhitespace: true

# Disallows unused params in function expression and function declaration.
#
# @type {boolean}
# Letting JSHint handle unused params since it allows declared exceptions.
# disallowUnusedParams: false

# Disallows declaring variables with var.
#
# @type {boolean}
disallowVar: false

# Requires the variable to be the left hand operator when doing a boolean comparison
#
# @type {boolean|string[]}
disallowYodaConditions: true

jsDoc:
  checkAnnotations: true
  checkParamExistence: true
  checkParamNames: true
  checkRedundantAccess: true
  checkRedundantParams: true
  checkRedundantReturns: true
  checkReturnTypes: true
  checkTypes: strictNativeCase
  # disallowNewlineAfterDescription: true
  # enforceExistence: true
  leadingUnderscoreAccess: true
  # requireDescriptionCompleteSentence: true
  requireHyphenBeforeDescription: true
  requireNewlineAfterDescription: true
  requireParamDescription: true
  requireParamTypes: true
  requireReturnDescription: true
  requireReturnTypes: true

# Requires all lines to be at most the number of characters specified.
#
# @type {number|Object}
maximumLineLength:
  allExcept:
    - urlComments
  value: 180

# Requires the file to be at most the number of lines specified.
#
# @type {number|Object}
maximumNumberOfLines: false

# Enforces indentation of parameters in multiline functions.
#
# @type {boolean|number|string}
requireAlignedMultilineParams: 2

# Requires proper alignment in object literals.
#
# @type {string}
requireAlignedObjectValues: false

# Requires that a function expression be anonymous.
#
# @type {boolean|Object}
requireAnonymousFunctions: false

# Requires that variable assignment from array values are * destructured.
#
# @type {boolean}
requireArrayDestructuring: false

# Requires that arrow functions are used instead of anonymous function expressions in callbacks.
#
# @type {boolean}
requireArrowFunctions: false

# Requires blocks to begin and end with a newline.
#
# @type {boolean|number|Object}
requireBlocksOnNewline: 1

# Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES.
#
# @type {boolean|Object|string}
requireCamelCaseOrUpperCaseIdentifiers: false

# Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.
#
# @type {boolean|Object}
requireCapitalizedComments: false
  # allExcept:
  #   # Currently, the following exceptions are allowed to start a comment.
  #   # Add more as necessary.
  #   - console
  #   - else
  #   - function

# Requires constructors to be capitalized (except for this).
#
# @type {boolean|Object}
requireCapitalizedConstructors: true

# Requires capitalized constructors to to use the new keyword.
#
# @type {boolean|Object}
requireCapitalizedConstructorsNew: true

# Requires commas as last token on a line in lists.
#
# @type {boolean}
requireCommaBeforeLineBreak: true

# Requires curly braces after statements.
#
# @type {boolean|Object|string[]}
requireCurlyBraces:
  - catch
  - do
  - else
  - finally
  - for
  - if
  - switch
  - try
  - while

# Require a $ before variable names that are jquery assignments.
#
# @type {boolean|string}
requireDollarBeforejQueryAssignment: true

# Requires member expressions to use dot notation when possible
#
# @type {boolean|Object}
requireDotNotation: true

# Requires to return early in a function.
#
# @type {boolean}
requireEarlyReturn: true

# Requires declaring objects via ES6 enhanced object literals
#
# @type {boolean}
requireEnhancedObjectLiterals: true

# Requires function declarations by disallowing assignment of functions expressions to variables.  Function
# expressions are allowed in all other contexts, including when passed as function arguments or immediately invoked.
#
# @type {boolean}
requireFunctionDeclarations: true

# Requires imports to be alphabetised
#
# @type {boolean}
requireImportAlphabetized: false

# Requires placing keywords on a new line.
#
# @type {string[]}
requireKeywordsOnNewLine: []

# Requires placing line feed after assigning a variable.
#
# @type {boolean}
requireLineBreakAfterVariableAssignment: true

# Requires placing line feed at file end.
#
# @type {boolean}
requireLineFeedAtFileEnd: true

# Requires function names to match member and property names.
#
# @type {boolean|Object}
requireMatchingFunctionName: true

# Requires the test, consequent, and alternate to be on separate lines when using the ternary operator.
#
# @type {boolean}
requireMultiLineTernary: false

# Requires multiple var declaration.
#
# @type {boolean|Object|string}
requireMultipleVarDecl: false

# Require unassigned functions to be named inline
#
# @type {boolean|Object}
requireNamedUnassignedFunctions: false

# Requires newline before opening curly brace of all block statements.
#
# @type {boolean|string[]}
requireNewlineBeforeBlockStatements: false

# Requires newline before single if statements
#
# @type {boolean}
requireNewlineBeforeSingleStatementsInIf: false

# Requires use of binary, hexadecimal, and octal literals instead of parseInt.
#
# @type {boolean}
requireNumericLiterals: true

# Requires variable declarations from objects via destructuring
#
# @type {boolean}
requireObjectDestructuring: false

# Requires placing object keys on new line
#
# @type {boolean|Object}
requireObjectKeysOnNewLine:
  allExcept:
    - sameLine

# Requires operators to appear before line breaks and not after.
#
# @type {boolean|string[]}
requireOperatorBeforeLineBreak: true

# Requires an extra blank newline after var declarations, as long as it is not the last expression in the current block.
#
# @type {boolean}
# In most cases we want this but JSCS doesn't have a way to set exceptions.
requirePaddingNewLineAfterVariableDeclaration: true

# Requires newline after blocks
#
# @type {boolean|Object}
requirePaddingNewLinesAfterBlocks: false

# Requires a blank line after 'use strict'; statements
#
# @type {boolean|Object}
requirePaddingNewLinesAfterUseStrict: true

# Requires newline before module.exports
#
# @type {boolean}
requirePaddingNewLinesBeforeExport: true

# Requires an empty line above the specified keywords unless the keyword is the first expression in a block.
#
# @type {boolean|string[]}
requirePaddingNewlinesBeforeKeywords: false

# Requires newline before line comments
#
# @type {boolean|Object}
requirePaddingNewLinesBeforeLineComments: false

# Requires blocks to begin and end with 2 newlines
#
# @type {boolean|Object|number}
requirePaddingNewlinesInBlocks: false

# Requires newline inside curly braces of all objects.
#
# @type {boolean}
requirePaddingNewLinesInObjects: false

# Requires parentheses around arrow function expressions with a single parameter.
#
# @type {boolean}
requireParenthesesAroundArrowParam: false

# Requires parentheses around immediately invoked function expressions.
#
# @type {boolean}
requireParenthesesAroundIIFE: true

# Requires quoted keys in objects.
#
# @type {boolean}
requireQuotedKeysInObjects: false

# Requires semicolon after:
#   - var declaration
#   - expression statement
#   - return
#   - throw
#   - break
#   - continue
#   - do-while
#
# @type {boolean}
requireSemicolons: true

# Require arrow functions to use an expression body when returning a single statement (no block statement, implicit
# return).
#
# @type {boolean}
requireShorthandArrowFunctions: true

# Disallows sticking binary operators to the right.
#
# @type {boolean|string[]}
requireSpaceAfterBinaryOperators: true

# Requires space after comma
#
# @type {boolean|Object}
requireSpaceAfterComma: true

# Requires space after keyword.
#
# @type {boolean|string[]}
requireSpaceAfterKeywords: true

# Requires that a line comment (//) be followed by a space.
#
# @type {boolean|Object}
requireSpaceAfterLineComment: true

# Requires space after object keys.
#
# @type {boolean}
requireSpaceAfterObjectKeys: false

# Disallows sticking unary operators to the right.
#
# @type {boolean|string[]}
requireSpaceAfterPrefixUnaryOperators: false

# Disallows sticking binary operators to the left.
#
# @type {boolean|string[]}
requireSpaceBeforeBinaryOperators: true

# Requires space(s) before block statements (for loops, control structures).
#
# @type {boolean|number}
requireSpaceBeforeBlockStatements: 1

# Requires space before comma
#
# @type {boolean}
requireSpaceBeforeComma: false

# Require space after colon in object destructuring.
#
# @type {boolean}
requireSpaceBeforeDestructuredValues: true

# Requires space before keyword.
#
# @type {boolean|Object|string[]}
requireSpaceBeforeKeywords:
  allExcept:
    - function
    - typeof

# Requires space after object keys.
#
# @type {boolean}
requireSpaceBeforeObjectValues: true

# Disallows sticking unary operators to the left.
#
# @type {boolean|string[]}
requireSpaceBeforePostfixUnaryOperators: false

# Ensure there are spaces after argument separators in call expressions.
#
# @type {boolean}
requireSpaceBetweenArguments: true

# Requires space before () or {} in anonymous function expressions.
#
# @type {Object}
requireSpacesInAnonymousFunctionExpression:
  allExcept:
    - shorthand
  beforeOpeningCurlyBrace: true
  beforeOpeningRoundBrace: true

# Requires space before () in call expressions.
#
# @type {boolean}
requireSpacesInCallExpression: false

# Requires space before and/or after ? or : in conditional expressions.
#
# @type {boolean|Object}
requireSpacesInConditionalExpression: true

# Requires spaces in between for statement.
#
# @type {boolean}
requireSpacesInForStatement: true

# Requires space before () or {} in function expressions (both named and anonymous) and function declarations.
#
# @type {Object}
requireSpacesInFunction:
  beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Requires space before () or {} in function declarations.
#
# @type {Object}
requireSpacesInFunctionDeclaration:
  beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Requires space before () or {} in function expressions (both named and anonymous).
#
# @type {Object}
requireSpacesInFunctionExpression:
  beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Requires space before and after * in generator functions
#
# @type {Object}
requireSpacesInGenerator:
  afterStar: true
  # beforeStar: true

# Requires space before () or {} in named function expressions.
#
# @type {Object}
requireSpacesInNamedFunctionExpression:
  beforeOpeningCurlyBrace: true
  # beforeOpeningRoundBrace: true

# Requires space after opening array square bracket and before closing. Reports only on arrays, not on property accessors. Use requireSpacesInsideBrackets to report on all brackets.
#
# @type {Object|string}
requireSpacesInsideArrayBrackets: false

# Requires space after opening square bracket and before closing. Reports on all on brackets, even on property accessors. Use requireSpacesInsideArrayBrackets to exclude property accessors.
#
# @type {boolean|Object}
requireSpacesInsideBrackets: false

# Requires space after opening object curly brace and before closing.
#
# @type {Object|string}
requireSpacesInsideObjectBrackets: all

# Requires space after opening round bracket and before closing.
#
# @type {Object|string}
requireSpacesInsideParentheses: false

# Requires space after opening and before closing grouping parentheses.
#
# @type {boolean|Object}
requireSpacesInsideParenthesizedExpression: false

# Disallows using .apply in favor of the spread operator
#
# @type {boolean}
requireSpread: true

# Requires the use of template strings instead of string concatenation.
#
# @type {boolean|Object}
requireTemplateStrings: true

# Requires an extra comma following the final element of an array or object literal.
#
# @type {boolean|Object}
requireTrailingComma:
  ignoreSingleValue: true
  ignoreSingleLine: true

# Requires var declaration to be on the top of an enclosing scope
#
# @type {boolean}
requireVarDeclFirst: true

# Requires the variable to be the right hand operator when doing a boolean comparison
#
# @type {boolean|string[]}
requireYodaConditions: false

# Option to check var that = this expressions
#
# @type {string|string[]}
safeContextKeyword: SELF

# Validates proper alignment of function parameters.
#
# @type {boolean|Object}
validateAlignedFunctionParameters: true

# This rule is for validating the positioning of line comments. Block comments are ignored.
#
# @type {Object}
# validateCommentPosition:
#   allExcept: []
#   position: above | beside

# Validates indentation for switch statements and block statements
#
# @type {Object|number|string}
validateIndentation:
  allExcept:
    - comments
  value: 2

# Option to check line break characters
#
# @type {Object|string}
validateLineBreaks: CRLF

# Requires each element in array on a single line when array length is more than passed maximum number or array fills more than one line.
#
# @type {boolean|Object|number}
validateNewlineAfterArrayElements: 20

# Validates the order in object keys.
#
# @type {boolean|string}
# validateOrderInObjectKeys: true

# Enable validation of separators between function parameters.  Will ignore newlines.
#
# @type {string}
validateParameterSeparator: ', '

# Requires all quote marks to be either the supplied value, or consistent if true
#
# @type {boolean|Object|string}
validateQuoteMarks:
  escape: true
  mark: "'"
